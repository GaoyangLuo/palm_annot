#!/usr/bin/python3

import sys
import argparse
import random
import os
import fasta

Usage = \
(
"Align sequences in fev file to their corresponding motif HMMs.\n"
)

if len(sys.argv) == 0:
	print(Usage)

AP = argparse.ArgumentParser(description = Usage)

AP.add_argument("--input",
  required=True,
  help="Input file (generated by --fev option of palm_annot.py)")

AP.add_argument("--a2m_pattern",
  required=False,
  default="@.a2m",
  help="Pattern for a2m filenames, @ stands for HMM name (default @.a2m)")

AP.add_argument("--afa_pattern",
  required=False,
  default="@.afa",
  help="Pattern for aligned FASTA filenames with insert positions deleted, @ stands for HMM name (default @.afa)")

AP.add_argument("--tmpdir",
  required=False,
  default="/tmp",
  help="Directory for temporary files (default /tmp)")

AP.add_argument("--hmmdir",
  required=False,
  default="/d/int/polhummer/hmms/",
  help="Pathname of hmm db for hmmsearch")

AP.add_argument("--hmmdb",
  required=False,
  default="/d/int/polhummer/hmmdb/polhummer",
  help="Pathname of hmm db for hmmsearch")

Args = AP.parse_args()

if Args.a2m_pattern.find("@") < 0:
	sys.stderr.write("Must be @ in --a2m_pattern")
	assert False

if Args.afa_pattern.find("@") < 0:
	sys.stderr.write("Must be @ in --afa_pattern")
	assert False

TmpDir = Args.tmpdir
if not TmpDir.endswith("/"):
	TmpDir += "/"
if not os.path.isdir(TmpDir):
	sys.stderr.write("Not a directory: --tmpdir %s\n" % TmpDir)
	assert False

HMMDir = Args.hmmdir
if not HMMDir.endswith("/"):
	HMMDir += "/"

pid = os.getpid()
r = random.randint(0, 999999)
TmpPrefix = TmpDir + "palm_annot.%d.%d." % (pid, r)

def Exec(CmdLine):
	Code = os.system(CmdLine)
	if Code != 0:
		sys.stderr.write("\n")
		sys.stderr.write(CmdLine + "\n")
		sys.stderr.write("\n")
		sys.stderr.write("Error code %d\n" % Code)
		assert False

HMMs = set()
HMMToFile = {}
HMMToFN = {}
sys.stderr.write("Make FASTA files")
for Line in open(Args.input):
	Fields = Line[:-1].split('\t')
	Label = Fields[0]
	HMM = None
	Seq = None
	for Field in Fields:
		if Field.startswith("aaseq="):
			Fields2 = Field.split('=')
			assert len(Fields2) == 2
			Seq = Fields2[1]
		if Field.startswith("motif_hmm="):
			Fields2 = Field.split('=')
			assert len(Fields2) == 2
			HMM = Fields2[1]
	if HMM is None or Seq is None:
		continue
	if not HMM in HMMToFile.keys():
		FastaFN = TmpPrefix + HMM + ".fa"
		File = open(FastaFN, "w")
		sys.stderr.write("%s\n" % FastaFN)
		HMMToFile[HMM] = File
		HMMToFN[HMM] = FastaFN
	fasta.WriteSeq(HMMToFile[HMM], Seq, Label)

HMMs = list(HMMToFile.keys())
for HMM in HMMs:
	HMMToFile[HMM].close()

def OnSeq(Label, Seq):
	global fFa
	global ColCount

	AlignedSeq = ""
	for c in Seq:
		if c.isupper() or c == "-":
			AlignedSeq += c
	if ColCount is None:
		ColCount = len(AlignedSeq)
	else:
		assert len(AlignedSeq) == ColCount
	fasta.WriteSeq(fFa, AlignedSeq, Label)

def MakeFasta(A2MFN, AFAFN):
	global fFa
	global ColCount
	ColCount = None
	fFa = open(AFAFN, "w")
	fasta.ReadSeqsOnSeq(A2MFN, OnSeq)
	fFa.close()

for HMM in HMMs:
	HMMFN = HMMDir + HMM + ".hmm"
	FaFN = HMMToFN[HMM]
	A2MFN = Args.a2m_pattern.replace("@", HMM)
	AFAFN = Args.afa_pattern.replace("@", HMM)

	sys.stderr.write(A2MFN + "\n")
	CmdLine = "hmmalign "
	CmdLine += " --outformat a2m"
	CmdLine += " " + HMMFN
	CmdLine += " " + FaFN
	CmdLine += " > " + A2MFN
	Exec(CmdLine)

	MakeFasta(A2MFN, AFAFN)
